# Builds the application and makes releases

name: Build and release

on:
  push:
    branches:
      - main
    tags:
      # Push to tags matching v*
      - 'v*'

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:

  build:
    name: Build and release
    runs-on: ubuntu-latest

    env:
      GOLANGCI_LINT_VERSION: "v1.60.3"

    steps:

      - name: Check out code
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - uses: actions/setup-node@v4
        with:
          node-version-file: 'client/.nvmrc'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Lowercase REPO_OWNER which is required for containers
      - name: Set lowercase REPO_OWNER
        run: |
          REPO_OWNER=${{ github.repository_owner }}
          echo "REPO_OWNER=${REPO_OWNER,,}" >>${GITHUB_ENV}

      - name: Generate Docker tags and labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO_OWNER }}/revaulter
          tags: |
            type=edge,branch=main
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Set variables
        run: |
          BUILD_ID=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          COMMIT_HASH=$(echo "${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}" | head -c 7)

          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

          echo "BUILD_ID: '$BUILD_ID'"
          echo "BUILD_VERSION: '$BUILD_VERSION'"
          echo "BUILD_DATE: '$BUILD_DATE'"
          echo "COMMIT_HASH: '$COMMIT_HASH'"

          BUILDINFO_PKG="github.com/italypaleale/revaulter/pkg/buildinfo"
          BUILD_LDFLAGS="-X ${BUILDINFO_PKG}.Production=1 -X ${BUILDINFO_PKG}.AppVersion=${BUILD_VERSION} -X ${BUILDINFO_PKG}.BuildId=${BUILD_ID} -X ${BUILDINFO_PKG}.BuildDate=${BUILD_DATE} -X ${BUILDINFO_PKG}.CommitHash=${COMMIT_HASH} -buildid=${BUILD_ID}"

          echo "BUILD_LDFLAGS=$BUILD_LDFLAGS" >> $GITHUB_ENV

          echo "BUILD_LDFLAGS: '$BUILD_LDFLAGS'"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run go-generate
        run: |
          echo -e "\n###\nFetching NPM dependencies\n"
          (cd client; npm ci)

          echo -e "\n###\nRunning 'go generate'\n"
          go generate -v ./...

      - name: Run golangci-Lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          skip-cache: true

      - name: Run tests
        run: |
          CGO_ENABLED=1 \
            go test -v \
              -race \
              -tags unit \
              ./... 

      - name: Build for all platforms
        run: |
          mkdir -p .bin .out

          echo -e "\n###\nBuilding linux/amd64\n"
          mkdir .bin/revaulter-v${{ env.BUILD_ID }}-linux-amd64
          GOOS=linux \
          GOARCH=amd64 \
          CGO_ENABLED=0 \
            go build \
              -ldflags "${BUILD_LDFLAGS}" \
              -o .bin/revaulter-v${{ env.BUILD_ID }}-linux-amd64/revaulter \
              -trimpath \
              ./cmd/revaulter
          cp LICENSE.md .bin/revaulter-v${{ env.BUILD_ID }}-linux-amd64
          cp README.md .bin/revaulter-v${{ env.BUILD_ID }}-linux-amd64
          (cd .bin && tar -czvf ../.out/revaulter-v${{ env.BUILD_ID }}-linux-amd64.tar.gz revaulter-v${{ env.BUILD_ID }}-linux-amd64)

          echo -e "\n###\nBuilding linux/386\n"
          mkdir .bin/revaulter-v${{ env.BUILD_ID }}-linux-386
          GOOS=linux \
          GOARCH=386 \
          CGO_ENABLED=0 \
            go build \
              -ldflags "${BUILD_LDFLAGS}" \
              -o .bin/revaulter-v${{ env.BUILD_ID }}-linux-386/revaulter \
              -trimpath \
              ./cmd/revaulter
          cp LICENSE.md .bin/revaulter-v${{ env.BUILD_ID }}-linux-386
          cp README.md .bin/revaulter-v${{ env.BUILD_ID }}-linux-386
          (cd .bin && tar -czvf ../.out/revaulter-v${{ env.BUILD_ID }}-linux-386.tar.gz revaulter-v${{ env.BUILD_ID }}-linux-386)

          echo -e "\n###\nBuilding linux/arm64\n"
          mkdir .bin/revaulter-v${{ env.BUILD_ID }}-linux-arm64
          GOOS=linux \
          GOARCH=arm64 \
          CGO_ENABLED=0 \
            go build \
              -ldflags "${BUILD_LDFLAGS}" \
              -o .bin/revaulter-v${{ env.BUILD_ID }}-linux-arm64/revaulter \
              -trimpath \
              ./cmd/revaulter
          cp LICENSE.md .bin/revaulter-v${{ env.BUILD_ID }}-linux-arm64
          cp README.md .bin/revaulter-v${{ env.BUILD_ID }}-linux-arm64
          (cd .bin && tar -czvf ../.out/revaulter-v${{ env.BUILD_ID }}-linux-arm64.tar.gz revaulter-v${{ env.BUILD_ID }}-linux-arm64)

          echo -e "\n###\nBuilding linux/armv7\n"
          mkdir .bin/revaulter-v${{ env.BUILD_ID }}-linux-armv7
          GOOS=linux \
          GOARCH=arm \
          GOARM=7 \
          CGO_ENABLED=0 \
            go build \
              -ldflags "${BUILD_LDFLAGS}" \
              -o .bin/revaulter-v${{ env.BUILD_ID }}-linux-armv7/revaulter \
              -trimpath \
              ./cmd/revaulter
          cp LICENSE.md .bin/revaulter-v${{ env.BUILD_ID }}-linux-armv7
          cp README.md .bin/revaulter-v${{ env.BUILD_ID }}-linux-armv7
          (cd .bin && tar -czvf ../.out/revaulter-v${{ env.BUILD_ID }}-linux-armv7.tar.gz revaulter-v${{ env.BUILD_ID }}-linux-armv7)

          echo -e "\n###\nBuilding darwin/amd64\n"
          mkdir .bin/revaulter-v${{ env.BUILD_ID }}-macos-x64
          GOOS=darwin \
          GOARCH=amd64 \
          CGO_ENABLED=0 \
            go build \
              -ldflags "${BUILD_LDFLAGS}" \
              -o .bin/revaulter-v${{ env.BUILD_ID }}-macos-x64/revaulter \
              -trimpath \
              ./cmd/revaulter
          cp LICENSE.md .bin/revaulter-v${{ env.BUILD_ID }}-macos-x64
          cp README.md .bin/revaulter-v${{ env.BUILD_ID }}-macos-x64
          (cd .bin && tar -czvf ../.out/revaulter-v${{ env.BUILD_ID }}-macos-x64.tar.gz revaulter-v${{ env.BUILD_ID }}-macos-x64)

          echo -e "\n###\nBuilding darwin/arm64\n"
          mkdir .bin/revaulter-v${{ env.BUILD_ID }}-macos-arm64
          GOOS=darwin \
          GOARCH=arm64 \
          CGO_ENABLED=0 \
            go build \
              -ldflags "${BUILD_LDFLAGS}" \
              -o .bin/revaulter-v${{ env.BUILD_ID }}-macos-arm64/revaulter \
              -trimpath \
              ./cmd/revaulter
          cp LICENSE.md .bin/revaulter-v${{ env.BUILD_ID }}-macos-arm64
          cp README.md .bin/revaulter-v${{ env.BUILD_ID }}-macos-arm64
          (cd .bin && tar -czvf ../.out/revaulter-v${{ env.BUILD_ID }}-macos-arm64.tar.gz revaulter-v${{ env.BUILD_ID }}-macos-arm64)

          echo -e "\n###\nLinks for Docker buildx\n"
          (
            cd .bin && \
            ln -v -s revaulter-v${{ env.BUILD_ID }}-linux-amd64 linux-amd64 && \
            ln -v -s revaulter-v${{ env.BUILD_ID }}-linux-arm64 linux-arm64 && \
            ln -v -s revaulter-v${{ env.BUILD_ID }}-linux-armv7 linux-arm \
          )

          echo -e "\n###\nCompilation done\n"
          echo ".bin:"
          ls -al .bin
          echo ".out:"
          ls -al .out

      - name: Publish binaries as Actions Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: .out
          include-hidden-files: true
          compression-level: 0

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        id: docker-build-push
        with:
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64/v8,linux/arm/v7
          context: .
          push: true

      - name: Binary attestation linux-amd64
        uses: actions/attest-build-provenance@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          subject-name: linux-amd64/revaulter
          subject-path: '.bin/revaulter-*-linux-amd64/revaulter'

      - name: Binary attestation linux-386
        uses: actions/attest-build-provenance@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          subject-name: linux-386/revaulter
          subject-path: '.bin/revaulter-*-linux-386/revaulter'

      - name: Binary attestation linux-arm64
        uses: actions/attest-build-provenance@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          subject-name: linux-arm64/revaulter
          subject-path: '.bin/revaulter-*-linux-arm64/revaulter'

      - name: Binary attestation linux-armv7
        uses: actions/attest-build-provenance@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          subject-name: linux-armv7/revaulter
          subject-path: '.bin/revaulter-*-linux-armv7/revaulter'

      - name: Binary attestation macos-x64
        uses: actions/attest-build-provenance@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          subject-name: macos-x64/revaulter
          subject-path: '.bin/revaulter-*-macos-x64/revaulter'

      - name: Binary attestation macos-arm64
        uses: actions/attest-build-provenance@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          subject-name: macos-arm64/revaulter
          subject-path: '.bin/revaulter-*-macos-arm64/revaulter'

      - name: Container image attestation
        uses: actions/attest-build-provenance@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          subject-name: 'ghcr.io/${{ env.REPO_OWNER }}/revaulter'
          subject-digest: ${{ steps.docker-build-push.outputs.digest }}
          push-to-registry: true
