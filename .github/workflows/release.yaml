# Creates a release for the application
#
# Required secrets:
# - DOCKERHUB_TOKEN: Token for publishing to Docker Hub (optional)

name: Release

on:
  push:
    tags:
      # Push to tags matching v*
      - 'v*'

env:
  GO_VERSION: "^1.19"
  CGO_ENABLED: "0"
  NODE_VERSION: "16"
  # Username for Docker Hub-set to empty to disable pushing to Docker Hub
  DOCKERHUB_USERNAME: "italypaleale"

jobs:

  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:

      - name: Check out code
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set variables
        run: |
          mkdir -p .bin
          # Fetch semver: https://github.com/fsaintjacques/semver-tool
          curl https://raw.githubusercontent.com/fsaintjacques/semver-tool/3.3.0/src/semver > .bin/semver
          chmod +x .bin/semver

          # Trim the first 10 characters, which are "refs/tags/"
          BUILD_ID="${GITHUB_REF:10}"
          # Just like BUILD_ID, but without the "v" at the beginning
          BUILD_VERSION="${GITHUB_REF:11}"
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%S')
          COMMIT_HASH=$(echo $GITHUB_SHA | head -c 7)
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

          # Branch
          MAJOR_VERSION=$(.bin/semver get major $BUILD_VERSION)
          MINOR_VERSION=$(.bin/semver get minor $BUILD_VERSION)
          PRERELEASE=$(.bin/semver get prerel $BUILD_VERSION)
          BRANCH=""
          if [ "$MAJOR_VERSION" = "0" ]; then
            BRANCH="$MAJOR_VERSION.$MINOR_VERSION"
          else
            BRANCH="$MAJOR_VERSION"
          fi
          if [ "$PRERELEASE" != "" ]; then
            BRANCH="${BRANCH}-pre"
          fi
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "PRERELEASE=$PRERELEASE" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: env.DOCKERHUB_USERNAME != ''
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build for all platforms
        run: |
          mkdir -p .bin .out

          echo -e "\n###\nFetching NPM dependencies\n"
          (cd client; npm ci)

          echo -e "\n###\nFetching Go modules\n"
          go get -v

          echo -e "\n###\nRunning 'go generate'\n"
          go generate -v ./...

          echo -e "\n###\nSetting BUILD_LDFLAGS\n"
          BUILDINFO_PKG="github.com/italypaleale/unlocker/buildinfo"
          BUILD_LDFLAGS="-X ${BUILDINFO_PKG}.Production=1 -X ${BUILDINFO_PKG}.AppVersion=${{env.BUILD_VERSION}} -X ${BUILDINFO_PKG}.BuildId=${{env.BUILD_ID}} -X ${BUILDINFO_PKG}.BuildDate=${{env.BUILD_DATE}} -X ${BUILDINFO_PKG}.CommitHash=${{env.COMMIT_HASH}}"
          echo "BUILD_LDFLAGS=${BUILD_LDFLAGS}"

          echo -e "\n###\nBuilding linux/amd64\n"
          mkdir .bin/unlocker-v${{env.BUILD_VERSION}}-linux-amd64
          GOOS=linux \
          GOARCH=amd64 \
            go build \
              -ldflags "${BUILD_LDFLAGS}" \
              -o .bin/unlocker-v${{env.BUILD_VERSION}}-linux-amd64/unlocker
          cp LICENSE.md .bin/unlocker-v${{env.BUILD_VERSION}}-linux-amd64
          cp README.md .bin/unlocker-v${{env.BUILD_VERSION}}-linux-amd64
          (cd .bin && tar -czvf ../.out/unlocker-v${{env.BUILD_VERSION}}-linux-amd64.tar.gz unlocker-v${{env.BUILD_VERSION}}-linux-amd64)

          echo -e "\n###\nBuilding linux/386\n"
          mkdir .bin/unlocker-v${{env.BUILD_VERSION}}-linux-386
          GOOS=linux \
          GOARCH=386 \
            go build \
              -ldflags "${BUILD_LDFLAGS}" \
              -o .bin/unlocker-v${{env.BUILD_VERSION}}-linux-386/unlocker
          cp LICENSE.md .bin/unlocker-v${{env.BUILD_VERSION}}-linux-386
          cp README.md .bin/unlocker-v${{env.BUILD_VERSION}}-linux-386
          (cd .bin && tar -czvf ../.out/unlocker-v${{env.BUILD_VERSION}}-linux-386.tar.gz unlocker-v${{env.BUILD_VERSION}}-linux-386)

          echo -e "\n###\nBuilding linux/arm64\n"
          mkdir .bin/unlocker-v${{env.BUILD_VERSION}}-linux-arm64
          GOOS=linux \
          GOARCH=arm64 \
            go build \
              -ldflags "${BUILD_LDFLAGS}" \
              -o .bin/unlocker-v${{env.BUILD_VERSION}}-linux-arm64/unlocker
          cp LICENSE.md .bin/unlocker-v${{env.BUILD_VERSION}}-linux-arm64
          cp README.md .bin/unlocker-v${{env.BUILD_VERSION}}-linux-arm64
          (cd .bin && tar -czvf ../.out/unlocker-v${{env.BUILD_VERSION}}-linux-arm64.tar.gz unlocker-v${{env.BUILD_VERSION}}-linux-arm64)

          echo -e "\n###\nBuilding linux/armv7\n"
          mkdir .bin/unlocker-v${{env.BUILD_VERSION}}-linux-armv7
          GOOS=linux \
          GOARCH=arm \
          GOARM=7 \
            go build \
              -ldflags "${BUILD_LDFLAGS}" \
              -o .bin/unlocker-v${{env.BUILD_VERSION}}-linux-armv7/unlocker
          cp LICENSE.md .bin/unlocker-v${{env.BUILD_VERSION}}-linux-armv7
          cp README.md .bin/unlocker-v${{env.BUILD_VERSION}}-linux-armv7
          (cd .bin && tar -czvf ../.out/unlocker-v${{env.BUILD_VERSION}}-linux-armv7.tar.gz unlocker-v${{env.BUILD_VERSION}}-linux-armv7)

          echo -e "\n###\nBuilding darwin/amd64\n"
          mkdir .bin/unlocker-v${{env.BUILD_VERSION}}-macos
          GOOS=darwin \
          GOARCH=amd64 \
            go build \
              -ldflags "${BUILD_LDFLAGS}" \
              -o .bin/unlocker-v${{env.BUILD_VERSION}}-macos-x64/unlocker
          cp LICENSE.md .bin/unlocker-v${{env.BUILD_VERSION}}-macos-x64
          cp README.md .bin/unlocker-v${{env.BUILD_VERSION}}-macos-x64
          (cd .bin && tar -czvf ../.out/unlocker-v${{env.BUILD_VERSION}}-macos-x64.tar.gz unlocker-v${{env.BUILD_VERSION}}-macos-x64)

          echo -e "\n###\nBuilding darwin/arm64\n"
          mkdir .bin/unlocker-v${{env.BUILD_VERSION}}-macos-arm64
          GOOS=darwin \
          GOARCH=arm64 \
            go build \
              -ldflags "${BUILD_LDFLAGS}" \
              -o .bin/unlocker-v${{env.BUILD_VERSION}}-macos-arm64/unlocker
          cp LICENSE.md .bin/unlocker-v${{env.BUILD_VERSION}}-macos-arm64
          cp README.md .bin/unlocker-v${{env.BUILD_VERSION}}-macos-arm64
          (cd .bin && tar -czvf ../.out/unlocker-v${{env.BUILD_VERSION}}-macos-arm64.tar.gz unlocker-v${{env.BUILD_VERSION}}-macos-arm64)

          echo -e "\n###\nLinks for Docker buildx\n"
          (
            cd .bin && \
            ln -v -s unlocker-v${{env.BUILD_VERSION}}-linux-amd64 linux-amd64 && \
            ln -v -s unlocker-v${{env.BUILD_VERSION}}-linux-arm64 linux-arm64 && \
            ln -v -s unlocker-v${{env.BUILD_VERSION}}-linux-armv7 linux-arm \
          )

          echo -e "\n###\nCompilation done\n"
          ls -al .bin
          ls -al .out

      # Publish artifacts
      - name: Publish binaries as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: .out

      # Create release and upload assets
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: ${{ env.PRERELEASE != '' }}

      - name: Upload release asset unlocker-linux-amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .out/unlocker-v${{env.BUILD_VERSION}}-linux-amd64.tar.gz
          asset_name: unlocker-v${{env.BUILD_VERSION}}-linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload release asset unlocker-linux-386
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .out/unlocker-v${{env.BUILD_VERSION}}-linux-386.tar.gz
          asset_name: unlocker-v${{env.BUILD_VERSION}}-linux-386.tar.gz
          asset_content_type: application/gzip

      - name: Upload release asset unlocker-linux-arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .out/unlocker-v${{env.BUILD_VERSION}}-linux-arm64.tar.gz
          asset_name: unlocker-v${{env.BUILD_VERSION}}-linux-arm64.tar.gz
          asset_content_type: application/gzip

      - name: Upload release asset unlocker-linux-armv7
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .out/unlocker-v${{env.BUILD_VERSION}}-linux-armv7.tar.gz
          asset_name: unlocker-v${{env.BUILD_VERSION}}-linux-armv7.tar.gz
          asset_content_type: application/gzip

      - name: Upload release asset unlocker-macos-x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .out/unlocker-v${{env.BUILD_VERSION}}-macos-x64.tar.gz
          asset_name: unlocker-v${{env.BUILD_VERSION}}-macos-x64.tar.gz
          asset_content_type: application/gzip

      - name: Upload release asset unlocker-macos-arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .out/unlocker-v${{env.BUILD_VERSION}}-macos-arm64.tar.gz
          asset_name: unlocker-v${{env.BUILD_VERSION}}-macos-arm64.tar.gz
          asset_content_type: application/gzip

      - name: Set variable REPO_OWNER
        shell: bash
        run: |
          # We need to lowercase the value of REPO_OWNER
          REPO_OWNER=${{ github.repository_owner }}
          echo "REPO_OWNER=${REPO_OWNER,,}" >>${GITHUB_ENV}

      - name: Docker build and push to GHCR
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: |
            ghcr.io/${{ env.REPO_OWNER }}/unlocker:${{env.BUILD_VERSION}}
            ghcr.io/${{ env.REPO_OWNER }}/unlocker:${{env.BRANCH}}
          push: true

      - name: Docker build and push to Docker Hub
        uses: docker/build-push-action@v2
        if: env.DOCKERHUB_USERNAME != ''
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/unlocker:${{env.BUILD_VERSION}}
            ${{ env.DOCKERHUB_USERNAME }}/unlocker:${{env.BRANCH}}
          push: true
